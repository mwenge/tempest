.TITLE	ALEARO-ALIENS EAROM
	.SBTTL	**************************
	.SBTTL	*			 *
	.SBTTL	*MODULE-ALEARO		 *
	.SBTTL	*PROGRAMMER:DAVE THEURER *
	.SBTTL	*FUNCTION:ALIENS EAROM	 *
	.SBTTL	*			 *
	.SBTTL	**************************
	.NLIST

	.INCLUDE ALCOMN		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.LIST
	.SBTTL	GLOBLS
;ENTRY POINTS
	.GLOBL EAUPD,EAZERO,REHIIN,WRHIIN,EAFLG,WRBOOK,EAZBOO,EAZHIS,EAREQU,EAZFLG
;DATA
	.GLOBL	EABAD
	.SBTTL	HARDWARE DEFINITIONS
				;
				;EAROM HARDWARE DEFINITIONS
				;
;EAIN				;HARDWARE READ PORT
;EADAL				;BASE ADDRESS (STORE TO EADAL +OFFSET
				;TO ENABLE ADDRESS)
;EACTL				;EA CONTROL BATCH;NOT C1,C2 FUNCTION
				;0 0 READ MODE
				;1 0 WRITE MODE
				;1 1 ERASE MODE
EACK	=1			;CLOCK BIT
EAC1	=4			;C1 (INVERTED TO CHIP)
EAC2	=2			;C2
EACE	=8			;CHIP SELECT
	.ASECT			;PROGRAM RAM
	.=1C6			;
EAZFLG:	.BLKB 1		;EA ROM ZERO FLAG (NOT 0=ZERO EAROM)

EAREQU:	.BLKB 1			;EA ROM ACCESS REQUEST
				;IF A BIT=0 THEN NO ACTION REQUESTED.
				;	 =1 THEN ACCESS THAT DATA.
				;D7 REPRESENTS 7TH BATCH OF DATA
				;D0 REPRESENTS 0TH BATCH OF DATA

EARWRQ:	.BLKB 1			;EA ROM ACCESS TYPE (MATCHES EAREQU)
				;IF BIT=0 THEN READ, ELSE WRITE
				;
EABAD:	.BLKB 1			;EA ROM ACCESS SUCCESS(0) FAIL(1) (MATCHES EAREQU)
				;
				;EA CONTROL BYTES FOR 1 OPERATION
				;
EAFLG:	.BLKB 1			;D7=1=ERASE	;=0=R/W
				;D6=1=WRITE	;D5=1=READ
				;D4=1=ZERO EAROM (IF D6=WRITE)
EAERAS	=80
EAWRIT	=40
EAREAD	=20
				;
EABC:	.BLKB 1			;BYTE INDEX INTO ADDRESS AT EASRCE
				;
EAX:	.BLKB 1			;BYTE OFFSET INTO EAROM FOR NEXT ACCESS
				;
EACNT:	.BLKB 1			;BYTE OFFSET INTO EAROM FOR LAST ACCESS
				;
EASEL:	.BLKB 1			;INDEX CODE FOR CURRENT BATCH OPERATION
				;
EACS:	.BLKB 1			;CHECKSUM
	.=0BD
EASRCE:	.BLKB 2			;RAM POINTER

	.CSECT
	.SBTTL	TABLE FOR RAM-EAROM TRANSFER
;
;EAROM ACCESS TABLES:OTH BYTE IN TABLE CORRESPONDS TO D0 IN EAREQU/EARWRQ
;
	.MACRO ROML ...A	;INPUT ...A=BYTES OF DATA TO ACCESS
	.BYTE ...RPC		;OFFSET INTO EAROM OF LOWEST BYTE TO ACCESS
...RPC=...RPC+...A
	.BYTE ...RPC		;OFFSET INTO EAROM OF HIGHEST BYTE TO ACCESS
...RPC=...RPC+1
	.ENDM			; (CHECKSUM)
	...RPC	=0

TEAX:				;EAROM OFFSET OF LOWEST BYTE IN GROUP
TEACNT	=TEAX+1			;EAROM OFFSET OF HIGHEST BYTE IN GROUP (CHECKSUM)
	ROML 9			;INITIALS
	ROML 11.		;HI SCORES & GAME PLAY OPTIONS
	ROML BOOKKE-BOOKKS	;BOOKKEEPING
TEASRL:
TEASRH	=TEASRL+1
	.WORD INITAL+15.
	.WORD HSCORL+15.
	.WORD BOOKKS
	.PAGE
	.SBTTL	EAROM APPLICATIONS

				;
				;ZERO EAROM
				;
EAZBOO:
	LDA I,04
	BNE GENZER		;ZERO BOOKKEEPING ONLY
EAZHIS:
	LDA I,03
	BNE GENZER		;ZERO HI SCORES/INITIALS ONLY
EAZERO:
	LDA I,07
GENZER:	LDY I,0FF		;REQUEST ZERO EAROM
	BNE GENREQ		;REQUEST ALL BATCHES
				;REQUEST WRITE

				;
				;
WRHIIN:	LDA I,03		;WRITE HIGH SCORES & INITIALS
	BNE NOZERO
WRBOOK:	LDA I,04		;REQUEST BOOKKEEPING UPDATE
NOZERO:	LDY I,0
GENREQ:	STY EAZFLG		;DO NOT ZERO EAROM
	PHA
	ORA EAREQU
	STA EAREQU
	PLA
	ORA EARWRQ
	STA EARWRQ
	RTS
REHIIN:	LDA I,07		;READ IN EVERYTHING
	STA EAREQU
	LDA I,0
	STA EARWRQ
;	JMP EAUPD		;GO GET IT NOW.
	.PAGE
	.SBTTL	EAROM IO MAINLINE
;INPUT:EAFLG:0=NO ACTIVITY;80=ERASE;40=WRITE;20=READ
;      EAX:INDEX INTO EADAL OF LOC TO ACCESS IN EAROM
;      EABC:OFFSET FROM @EASRCE OF RAM DATA TO ACCESS
;      EACNT:EAROM OFFSET OF LAST BYTE TO MODIFY (STOP WHEN EAX>EACNT)
;
;OUTPUT:EAROM ERASED, WRITTEN TOO, OR READ
;
EAUPD:
	LDA EAFLG
	IFEQ			;EA ACTIVITY?
	LDA EAREQU		;NO.
	IFNE			;ANY REQUESTED?
	LDX I,0			;YES
	STX EABC		;ZERO SOURCE INDEX
	STX EACS		;ZERO CHECKSUM
	STX EASEL		;ZERO SELECT BIT
	LDX I,8
	SEC
	BEGIN			;LOOP UNTIL 1ST BIT ON LEFT IS FOUND
	ROR EASEL
	ASL
	DEX
	CSEND			;EXIT WHEN SET BIT IS FOUND
	LDY I,EAERAS		;DEFAULT TO ERASE/WRITE
	LDA EASEL
	AND EARWRQ
	IFEQ			;READ OR ERASE/WRITE?
	LDY I,EAREAD		;READ
	ENDIF
	STY EAFLG		;SAVE REQUEST
	LDA EASEL
	EOR EAREQU
	STA EAREQU		;TURN OFF REQUEST BIT
	TXA
	ASL
	TAX
	LDA X,TEAX		;SET UP PARAMETERS FOR EAROM WRITE
	STA EAX
	LDA X,TEACNT
	STA EACNT
	LDA X,TEASRL
	STA EASRCE
	LDA X,TEASRH
	STA EASRCE+1
	ENDIF
	ENDIF
	LDY I,0			;DESELECT CHIP
	STY EACTL
	LDA EAFLG
	IFEQ			;ANY ACTIVITY?
	RTS			;NO. EXIT
	ENDIF
	LDY EABC		;YES.
	LDX EAX
	ASL
	IFCS			;YES. R/W OR ERASE?
				;ERASE
	STA X,EADAL		;STORE ADDRESS
	LDA I,EAWRIT		;REQUEST WRITE
	STA EAFLG
	LDY #EAC1+EAC2+EACE	;ERASE & SELECT CHIP

	ELSE
	IFMI			;NO. READ OR WRITE?
	LDA I,EAERAS		;WRITE A BYTE
	STA EAFLG		;REQUEST ERASE FOR NEXT BYTE

	LDA EAZFLG
	IFNE			;ZERO EAROM?
	LDA I,0			;YES.
	STA NY,EASRCE		;CLEAR RAM TOO
	ENDIF
	LDA NY,EASRCE		;GET RAM DATA (DEFAULT)
	CPX EACNT
	IFCS
	LDA I,0			;ALL DONE. SET DONE FLAG
	STA EAFLG
	LDA EACS		;GET CHECKSUM
	ENDIF
	STA X,EADAL		;WRITE DATA
	LDY #EAC1+EACE		;SELECT WRITE MODE & CHIP SELECT
	ELSE
				;
				;READ
	LDA #EACE
	STA EACTL		;SELECT CHIP AND READ FUNCTION
	STA X,EADAL		;SELECT ADDRESS
	LDA #EACE+EACK		;
	STA EACTL		;SELECT CHIP & CLOCK & READ
	NOP
	LDA #EACE
	STA EACTL		;SELECT CHIP
	CPX EACNT
	LDA EAIN		;READ EAROM
	IFCS			;CHECKSUM?
				;YES
	EOR EACS		;MATCH CHECKSUM?
	IFNE			;
	LDA I,0			;NO.
	LDY EABC
	BEGIN			;CLEAR BAD LOCS IN RAM
	STA NY,EASRCE
	DEY
	MIEND
	LDA EASEL		;SET BAD FLAG
	ORA EABAD
	STA EABAD
	ENDIF
	LDA I,0
	STA EAFLG		;ALL DONE
	ELSE
				;NO. RAW DATA
	STA NY,EASRCE		;SAVE DATA IN RAM
	ENDIF
	LDY I,0			;DESELECT
	ENDIF
	CLC
	ADC EACS
	STA EACS		;UPDATE CHECKSUM
	INC EABC
	INC EAX
	ENDIF
	STY EACTL
	TYA
	IFEQ			;READ?
	JMP EAUPD		;YES. DO ALL READS AT ONCE
	ENDIF
	RTS
	HLL65
	.END
